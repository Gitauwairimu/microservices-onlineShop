version: 2.1

# Define the jobs we want to run for this project
jobs:
  build_adservice:
    docker:
      - image: docker:17.05.0-ce-git

        #auth:
        #  username: mydockerhub-user
        #  password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - setup_remote_docker            
      - run:
          name: build and push adservice image
          command: |
            cd src/adservice
            image=gitauwairimu/onlineshop:adservice.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            # docker login --username=$DOCKER_USER --password=$DOCKER_PASS
            docker push $image

  build_cartservice:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: build and push cartservice image
          command: |
            source=cartservice
            cd src/$source/src/
            image=gitauwairimu/onlineshop:$source.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push $image

  build_checkoutservice:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: build and push checkoutservice image
          command: |
            source=checkoutservice
            cd src/$source
            image=gitauwairimu/onlineshop:$source.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push $image

  build_emailservice:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: build and push emailservice image
          command: |
            source=emailservice
            cd src/$source
            image=gitauwairimu/onlineshop:$source.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push $image

  build_frontend:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: build and push frontend image
          command: |
            source=frontend
            cd src/$source
            image=gitauwairimu/onlineshop:$source.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push $image

  build_loadgenerator:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: build and push loadgenerator image
          command: |
            source=loadgenerator
            cd src/$source
            image=gitauwairimu/onlineshop:$source.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push $image

  build_paymentservice:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: build and push paymentservice image
          command: |
            source=paymentservice
            cd src/$source
            image=gitauwairimu/onlineshop:$source.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push $image

  build_productcatalogservice:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: build and push productcatalogservice image
          command: |
            source=productcatalogservice
            cd src/$source
            image=gitauwairimu/onlineshop:$source.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push $image

  build_recommendationservice:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: build and push recommendationservice image
          command: |
            source=recommendationservice
            cd src/$source
            image=gitauwairimu/onlineshop:$source.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push $image

  build_shippingservice:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: build and push shippingservice image
          command: |
            source=shippingservice
            cd src/$source
            image=gitauwairimu/onlineshop:$source.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push $image

  build_currencyservice:
    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: build and push currencyservice image
          command: |
            source=currencyservice
            cd src/$source
            image=gitauwairimu/onlineshop:$source.$CIRCLE_WORKFLOW_ID
            docker build -t $image .
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push $image


  # create_cluster:
  #   docker:
  #     - image: amazon/aws-cli

  #   steps:
  #     - checkout
  #     - setup_remote_docker  
  #     - run:
  #         name: create a cluster
  #         command: |
  #           aws configure import --csv file://circleciUtility_accessKeys.csv
  #           yum install -y tar
  #           yum install -y gzip
  #           echo "............................................................................"
  #           curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
  #           mv /tmp/eksctl /usr/local/bin
  #           eksctl version

  #           eksctl create cluster \
  #           --name ekspopcluster \
  #           --version 1.20 \
  #           --region us-east-1 \
  #           --nodegroup-name eksnodegrp \
  #           --node-type t2.micro \
  #           --nodes 1 \
  #           --nodes-min 1 \
  #           --nodes-max 1

  deploy_workload:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: deploy workload
          command: |
            # cd kubernetes-manifests
            # aws eks update-kubeconfig --region us-east-1 --name eksfirst
            cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
            enabled=1
            gpgcheck=1
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            EOF
            yum install -y kubectl

# Orchestrate our job run sequence
workflows:
  build_and_push to dockerhub:
    jobs:
      # - build_adservice
      # - build_cartservice
      # - build_checkoutservice
      # - build_emailservice
      # - build_frontend
      # - build_loadgenerator
      # - build_paymentservice
      # - build_productcatalogservice
      # - build_recommendationservice
      # - build_shippingservice
      # - build_currencyservice
      # - create_cluster
      - deploy_workload
          # requires:
          # - build_adservice
          # - build_cartservice
          # - build_checkoutservice
          # - build_emailservice
          # - build_frontend
          # - build_loadgenerator
          # - build_paymentservice
          # - build_productcatalogservice
          # - build_recommendationservice
          # - build_shippingservice
          # - build_currencyservice
